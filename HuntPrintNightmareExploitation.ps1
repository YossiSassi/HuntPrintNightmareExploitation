# Looks for evidence of PrintNightmare Execution in Logs. Requires 'Event Log Readers' or higher permissions.
# Defaults to domain controllers, yet can be pointed to any/all domain machines (using -AllComputers parameter, or changes LDAP query).
# Outputs results of potential PrintNightmare exploitation to console + CSV file.
# Comments to yossis@protonmail.com (1nTh35h311)

<#
EventId 808 (Microsoft-Windows-PrintService/Admin) , 
EventID 316 (Microsoft-Windows-PrintService/Admin) ,
31017  (Microsoft-Windows-SmbClient/Security)
#>

param (
    [cmdletbinding()]
    [switch]$AllComputers
)

$PrintNightmareFilter = @'
<QueryList>
  <Query Id="0" Path="Microsoft-Windows-PrintService/Admin">
    <Select Path="Microsoft-Windows-PrintService/Admin">*[System[(EventID=808 or EventID=316)]]</Select>
  </Query>
    <Query Id="1" Path="Microsoft-Windows-SmbClient/Security">
    <Select Path="Microsoft-Windows-SmbClient/Security">*[System[(EventID=31017)]]</Select>
  </Query>
</QueryList>
'@

function Switch-Color {
    if ($global:Color -eq "Yellow") {$global:Color = "Cyan"} else {$global:Color = "Yellow"};
    return $global:Color
}

$global:Color = "Yellow";
$Results = @();

# Search for AD computer objects (default is Domain Controllers, unless -AllComputers was specified)
$Searcher = New-Object System.DirectoryServices.DirectorySearcher;

if ($AllComputers)
    {
        $Searcher.Filter = '(&(objectClass=computer)(!(userAccountControl:1.2.840.113556.1.4.803:=2)))';
    }
else
    {
        $Searcher.Filter = '(&(objectCategory=computer)(primaryGroupID=516))';
    }

$Computers = $Searcher.FindAll().Properties.dnshostname;

$FileName = "$(Get-Location)\PrintnightmareExploitation_$(Get-Date -Format ddMMyyyyHHmmss).csv";

$Events = @(); 
[int]$i = 1;

$Computers | foreach {
    "Querying $_ ($i out of $($Computers.count))...";
    $Events += Get-WinEvent -ComputerName $_ -FilterXml $PrintNightmareFilter -ErrorAction SilentlyContinue;
    $i++
}

if ($Events)
    {
        $Results += "EventID,Computer,DllName,DateTime,EventInfo";

        $Events | foreach {
            # Event 808
            $xml = ([xml]$_.ToXml()).Event.System;
            $Computer = $xml.Computer;
            $EventInfo = $xml.InnerText;
            $Datetime = $_.TimeCreated
            $DllName = ([xml]$_.ToXml()).Event.UserData.LoadPluginFailed.PluginDllName;
            Write-Host "[X] Potential Printnightmare exploitation (Event ID: $($_.Id))`nComputer: $Computer`nDllName: $DllName`nDateTime: $Datetime`nEventInfo: $EventInfo" -ForegroundColor $(Switch-Color);
            $Results += "$($_.Id),$Computer,$DllName,$Datetime,$EventInfo"
        }
        # save results to CSV
        $Results | Out-File $FileName -Force;
        Write-Host "`nResults saved to $FileName." -ForegroundColor Green
    }
else
    {
        Write-Host "No relevant events found." -ForegroundColor Cyan
    }
